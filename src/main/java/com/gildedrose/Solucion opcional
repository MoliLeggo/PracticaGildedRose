package com.gildedrose;

public class GildedRose {
    public Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            updateItemQuality(items[i]);
            updateItemSellIn(items[i]);
            if (items[i].sellIn < 0) {
                handleExpiredItem(items[i]);
            }
        }
    }

    private void updateItemQuality(Item item) {
        if (!item.name.equals("Aged Brie") && !item.name.equals("Backstage passes to a TAFKAL80ETC concert")) {
            if (item.quality > 0 && !item.name.equals("Sulfuras, Hand of Ragnaros")) {
                item.quality = item.quality - 1;
            }
        } else {
            if (item.quality < 50) {
                item.quality = item.quality + 1;
                if (item.name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                    updateBackstagePassesQuality(item);
                }
            }
        }
    }

    private void updateBackstagePassesQuality(Item item) {
        if (item.sellIn < 11 && item.quality < 50) {
            item.quality = item.quality + 1;
        }
        if (item.sellIn < 6 && item.quality < 50) {
            item.quality = item.quality + 1;
        }
    }

    private void updateItemSellIn(Item item) {
        if (!item.name.equals("Sulfuras, Hand of Ragnaros")) {
            item.sellIn = item.sellIn - 1;
        }
    }

    private void handleExpiredItem(Item item) {
        if (!item.name.equals("Aged Brie")) {
            if (!item.name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (item.quality > 0 && !item.name.equals("Sulfuras, Hand of Ragnaros")) {
                    item.quality = item.quality - 1;
                }
            } else {
                item.quality = 0;
            }
        } else {
            if (item.quality < 50) {
                item.quality = item.quality + 1;
            }
        }
    }
}
updateQuality: It iterates over the items and calls helper methods.

updateItemQuality: It updates the quality based on the item's name.

updateBackstagePassesQuality: It handles the special rules for "Backstage passes".

updateItemSellIn: It decrements the sellIn value.

handleExpiredItem: It deals with items that have a sellIn value below zero.